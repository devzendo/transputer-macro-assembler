/*
 * Copyright (C) 2008-2018 Matt Gumbley, DevZendo.org http://devzendo.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.devzendo.tma.codegen

import org.devzendo.tma.ast._
import org.junit.Test
import org.log4s.Logger
import org.scalatest.MustMatchers
import org.scalatest.junit.AssertionsForJUnit

class TestLCDIWUS extends AssertionsForJUnit with MustMatchers {
    val logger: Logger = org.log4s.getLogger

    val model = new AssemblyModel(true)

    // Test the various cases that will cause Lines to be diverted to a DirectInstructionOffsetEncoder
    // All test the lineContainsDirectInstructionWithUndefinedSymbols object method (LCDIWUS)

    @Test
    def noStatement(): Unit = {
        val line = Line(1, "FOO:", Some("FOO"), None)
        lcdiwus(model, line) must be(false)
    }

    @Test
    def notEitherInstruction(): Unit = {
        val line = Line(1, "DB 5", None, Some(DB(List(Number(5)))))
        lcdiwus(model, line) must be(false)
    }

    @Test
    def indirectInstruction(): Unit = {
        val line = Line(1, "RESETCH", None, Some(IndirectInstruction("RESETCH", List(0x21, 0xf2))))
        lcdiwus(model, line) must be(false)
    }

    @Test
    def directInstructionWithEvaluatableExpression(): Unit = {
        val line = Line(1, "LDC 5", None, Some(DirectInstruction("LDC", 0x40, Number(5))))
        lcdiwus(model, line) must be(false)
    }

    @Test
    def directEncodedInstruction(): Unit = {
        // Since the DirectInstructionOffsetEncoder's job is to convert DirectInstructions with undefined symbols
        // into DirectEncodedInstructions, which are not generated by the parser, it should never see one.. but it
        // shouldn't barf or return true for one.
        val line = Line(1, "LDC 5", None, Some(DirectEncodedInstruction("LDC", List(0x45))))
        lcdiwus(model, line) must be(false)
    }

    @Test
    def directInstructionWithUndefinedExpression(): Unit = {
        val line = Line(1, "LDC FOO", None, Some(DirectInstruction("LDC", 0x40, SymbolArg("FOO"))))
        lcdiwus(model, line) must be(true)
    }

    @Test
    def directInstructionWithDefinedExpression(): Unit = {
        val constline = Line(1, "FOO EQU 10", None, Some(ConstantAssignment("FOO", Number(10))))
        model.setConstant("FOO", 10, constline)
        val line = Line(2, "LDC FOO", None, Some(DirectInstruction("LDC", 0x40, SymbolArg("FOO"))))
        lcdiwus(model, line) must be(false)
    }

    private def lcdiwus(model: AssemblyModel, line: Line) = {
        CodeGenerator.lineContainsDirectInstructionWithUndefinedSymbols(line, model)
    }

}
